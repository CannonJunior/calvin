services:
  # Database with pgvector for RAG
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: stockprediction
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stockprediction123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching API responses
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Note: Ollama is running locally on host at localhost:11434

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.simple
    ports:
      - "8000:8000"
    env_file:
      - .env.generated
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-stockprediction123}@postgres:5432/stockprediction
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
    volumes:
      - ./assets:/app/assets
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Finance Server (existing MCP server)
  finance-server:
    build:
      context: .
      dockerfile: docker/finance-server.Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env.generated
    volumes:
      - ./assets:/app/assets
    command: uv run finance_server.py --port 8001

  # Sentiment Analysis Server (existing MCP server)
  sentiment-server:
    build:
      context: .
      dockerfile: docker/sentiment-server.Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./assets:/app/assets
    command: uv run sentiment_analysis_server.py --port 8002

  # Agent Orchestrator
  agent-orchestrator:
    build:
      context: ./agents
      dockerfile: Dockerfile
    env_file:
      - .env.generated
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-stockprediction123}@postgres:5432/stockprediction
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - BACKEND_URL=http://backend:8000
    volumes:
      - ./assets:/app/assets
      - ./agents:/app
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: stockprediction_network